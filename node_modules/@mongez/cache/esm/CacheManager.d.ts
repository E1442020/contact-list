import { CacheDriverInterface, CacheManagerInterface } from "./types";
export declare class CacheManager implements CacheManagerInterface {
    /**
     * Cache Driver Engine
     */
    private driver;
    /**
     * Set driver engine
     */
    setDriver(driver: CacheDriverInterface): this;
    /**
     * Get driver engine
     */
    getDriver(): CacheDriverInterface;
    /**
     * Set cache into storage
     */
    set(key: string, value: any, expiresAfter?: number): any;
    /**
     * Get value from cache engine, if key does not exist return default value
     */
    get(key: string, defaultValue?: any): any;
    /**
     * Determine whether the cache engine has the given key
     */
    has(key: string): boolean;
    /**
     * Remove the given key from the cache storage
     */
    remove(key: string): any;
    /**
     * Set prefix key
     */
    setPrefixKey(key: string): any;
    /**
     * Get prefix key
     */
    getPrefixKey(): string;
    /**
     * {@inheritDoc}
     */
    setValueParser(parser: any): CacheDriverInterface;
    /**
     * {@inheritDoc}
     */
    setValueConverter(converter: any): CacheDriverInterface;
}
declare const cacheManager: CacheManager;
export default cacheManager;
//# sourceMappingURL=CacheManager.d.ts.map