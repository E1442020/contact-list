class CacheManager {
  /**
   * Cache Driver Engine
   */
  driver;
  /**
   * Set driver engine
   */
  setDriver(driver) {
    this.driver = driver;
    return this;
  }
  /**
   * Get driver engine
   */
  getDriver() {
    return this.driver;
  }
  /**
   * Set cache into storage
   */
  set(key, value, expiresAfter) {
    this.driver.set(key, value, expiresAfter);
    return this;
  }
  /**
   * Get value from cache engine, if key does not exist return default value
   */
  get(key, defaultValue = null) {
    return this.driver.get(key, defaultValue);
  }
  /**
   * Determine whether the cache engine has the given key
   */
  has(key) {
    return this.driver.has(key);
  }
  /**
   * Remove the given key from the cache storage
   */
  remove(key) {
    this.driver.remove(key);
    return this;
  }
  /**
   * Set prefix key
   */
  setPrefixKey(key) {
    this.driver.setPrefixKey(key);
    return this;
  }
  /**
   * Get prefix key
   */
  getPrefixKey() {
    return this.driver.getPrefixKey();
  }
  /**
   * {@inheritDoc}
   */
  setValueParser(parser) {
    this.driver.setValueParser(parser);
    return this;
  }
  /**
   * {@inheritDoc}
   */
  setValueConverter(converter) {
    this.driver.setValueConverter(converter);
    return this;
  }
}
const cacheManager = new CacheManager();

export { CacheManager, cacheManager as default };
