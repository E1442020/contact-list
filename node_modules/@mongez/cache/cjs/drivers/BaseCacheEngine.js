"use strict";

var config = require("../config.js");

class BaseCacheEngine {
  /**
   * Cache storage engine
   */
  storage;
  /**
   * Prefix key
   */
  prefixKey = "";
  /**
   * Value parser
   */
  _valueParser = this.parseValue.bind(this);
  /**
   * Value converter
   */
  _valueConverter = this.convertValue.bind(this);
  /**
   * set value parser
   */
  setValueParser(parser) {
    this._valueParser = parser;
    return this;
  }
  /**
   * Set value converter
   */
  setValueConverter(converter) {
    this._valueConverter = converter;
    return this;
  }
  /**
   * Set data into storage engine
   */
  set(key, value, expiresAfter) {
    let expireTime =
      expiresAfter !== undefined
        ? expiresAfter
        : config.getCacheConfig("expiresAfter") || 0;
    let expiresAt = expireTime
      ? new Date().getTime() + expireTime * 1000
      : undefined;
    this.storage.setItem(
      this.getKey(key),
      this._valueConverter({
        data: value,
        expiresAt,
      })
    );
    return this;
  }
  /**
   * Parse stored value
   */
  parseValue(value) {
    try {
      return JSON.parse(value);
    } catch (error) {
      return value;
    }
  }
  /**
   * Set the mechanism to store data
   */
  convertValue(value) {
    return JSON.stringify(value);
  }
  /**
   * Get vale from storage engine
   */
  get(key, defaultValue = null) {
    let value = this.storage.getItem(this.getKey(key));
    if (!value) return defaultValue;
    try {
      const cachedData = this._valueParser(value);
      // check if there is a cache timestamp
      // if it is lower than current timestamp
      // then remove the key from storage
      if (cachedData.expiresAt && cachedData.expiresAt < new Date().getTime()) {
        this.remove(key);
        return defaultValue;
      }
      return cachedData.data;
    } catch (error) {
      this.remove(key);
      return defaultValue;
    }
  }
  /**
   * Determine whether the cache engine has the given key
   */
  has(key) {
    return this.storage.getItem(this.getKey(key)) !== null;
  }
  /**
   * Remove key from storage
   */
  remove(key) {
    this.storage.removeItem(this.getKey(key));
    return this;
  }
  /**
   * Get a proper key
   */
  getKey(key) {
    key = (this.getPrefixKey() || "") + key;
    return key;
  }
  /**
   * Get prefix key
   */
  getPrefixKey() {
    return this.prefixKey;
  }
  /**
   * Set prefix key
   */
  setPrefixKey(key) {
    this.prefixKey = key;
    return this;
  }
}

module.exports = BaseCacheEngine;
