'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var CryptoJS = require('crypto-js');
var configurations = require('./configurations.js');

function _interopDefaultLegacy (e) { return e && typeof e === 'object' && 'default' in e ? e : { 'default': e }; }

var CryptoJS__default = /*#__PURE__*/_interopDefaultLegacy(CryptoJS);

/**
 * Return sha1 hashed string
 *
 * @param {string} text
 * @returns {string}
 */
function md5(text) {
    return CryptoJS__default["default"].MD5(text).toString();
}
/**
 * Return sha1 hashed string
 *
 * @param {string} text
 * @returns {string}
 */
function sha1(text) {
    return CryptoJS__default["default"].SHA1(text).toString();
}
/**
 * Return sha256 hashed string
 *
 * @param {string} text
 * @returns {string}
 */
function sha256(text) {
    return CryptoJS__default["default"].SHA256(text).toString();
}
/**
 * Return sha512 hashed string
 *
 * @param {string} text
 * @returns {string}
 */
function sha512(text) {
    return CryptoJS__default["default"].SHA512(text).toString();
}
/**
 * Get the encrypted text of the given value
 *
 * @param {any} value
 * @param {string} key
 * @param {any} driver
 * @returns {string}
 */
function encrypt(value, key, driver) {
    if (key === void 0) { key = configurations.getEncryptionConfig("key"); }
    if (driver === void 0) { driver = configurations.getEncryptionConfig("driver"); }
    if (!key) {
        throw new Error("Missing Encryption key, please define it or set it in encryption configurations");
    }
    var data = JSON.stringify({
        data: value,
    });
    return driver.encrypt(data, key).toString();
}
/**
 * Decrypt the given cypher text and return its original value, otherwise null will be returned.
 *
 * @param {string} cypher
 * @param {string} key
 * @param {any} driver
 * @returns {string|null}
 */
function decrypt(cypher, key, driver) {
    if (key === void 0) { key = configurations.getEncryptionConfig("key"); }
    if (driver === void 0) { driver = configurations.getEncryptionConfig("driver"); }
    if (!key) {
        throw new Error("Missing Encryption key, please define it or set it in encryption configurations");
    }
    try {
        var value = driver.decrypt(cypher, key).toString(CryptoJS__default["default"].enc.Utf8);
        if (!value)
            return null;
        return JSON.parse(value).data;
    }
    catch (error) {
        console.warn(error);
        return null;
    }
}

exports.decrypt = decrypt;
exports.encrypt = encrypt;
exports.md5 = md5;
exports.sha1 = sha1;
exports.sha256 = sha256;
exports.sha512 = sha512;
